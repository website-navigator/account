// Top-level build file where you can add configuration options common to all sub-projects/modules.

def javaProjects = []

javaProjects << 'api'
javaProjects << 'internal-api'

javaProjects << 'subject'
javaProjects << 'authentication:main'
javaProjects << 'authentication:spi'
javaProjects << 'authentication:password'

javaProjects << 'configuration'
javaProjects << 'storage:memory'

javaProjects << 'benchmark'
javaProjects << 'sample'

project(javaProjects) {
    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_1_8
}

project(javaProjects) {
    group = 'gq.optimalorange.account'
    version = '0.1.0'

    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }

    dependencies {
        def daggerVersion = '2.6.1'
        compile "com.google.dagger:dagger:$daggerVersion"
        compileOnly "com.google.dagger:dagger-compiler:$daggerVersion"
        // test
        testCompile 'junit:junit:4.12'
        testCompile "org.mockito:mockito-core:2.0.0-beta.+"
    }
}

// maven publish
project(javaProjects) {
    apply from: "$rootDir/gradle/maven-publish.gradle"

    // set artifactId
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId path.substring(1).replace(':', "-")
            }
        }
    }
    // set language and encoding
    tasks.findAll {
        task -> [JavaCompile, Javadoc].any {it.isInstance(task)}
    }.each {task ->
        task.options.encoding = 'UTF-8'
    }
    tasks.withType(Javadoc).each { task ->
        task.options.with {
            locale 'en_US'
            charSet 'UTF-8'
            docEncoding 'UTF-8'
            links ("https://docs.oracle.com/javase/${task.project.sourceCompatibility.majorVersion}/docs/api/")
        }
    }
}
// maven publish end

// code coverage
project(javaProjects) {
    apply plugin: "jacoco"

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }
}
// code coverage end

Iterable project(Iterable<String> projects, Closure configureClosure) {
    projects.collect {project(it, configureClosure)}
}
